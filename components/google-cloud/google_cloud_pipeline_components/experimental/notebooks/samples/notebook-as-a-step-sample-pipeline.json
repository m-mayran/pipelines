{
  "pipelineSpec": {
    "components": {
      "comp-execute-notebook": {
        "executorLabel": "exec-execute-notebook",
        "inputDefinitions": {
          "parameters": {
            "accelerator_core_count": {
              "type": "STRING"
            },
            "block_pipeline": {
              "type": "STRING"
            },
            "container_image_uri": {
              "type": "STRING"
            },
            "execution_id": {
              "type": "STRING"
            },
            "fail_pipeline": {
              "type": "STRING"
            },
            "input_notebook_file": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "master_type": {
              "type": "STRING"
            },
            "output_notebook_folder": {
              "type": "STRING"
            },
            "parameters": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "scale_tier": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "error": {
              "type": "STRING"
            },
            "output_notebook_file": {
              "type": "STRING"
            },
            "state": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-execute-notebook": {
          "container": {
            "args": [
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--input-notebook-file",
              "{{$.inputs.parameters['input_notebook_file']}}",
              "--output-notebook-folder",
              "{{$.inputs.parameters['output_notebook_folder']}}",
              "--execution-id",
              "{{$.inputs.parameters['execution_id']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--master-type",
              "{{$.inputs.parameters['master_type']}}",
              "--scale-tier",
              "{{$.inputs.parameters['scale_tier']}}",
              "--accelerator-core-count",
              "{{$.inputs.parameters['accelerator_core_count']}}",
              "--labels",
              "{{$.inputs.parameters['labels']}}",
              "--container-image-uri",
              "{{$.inputs.parameters['container_image_uri']}}",
              "--parameters",
              "{{$.inputs.parameters['parameters']}}",
              "--block-pipeline",
              "{{$.inputs.parameters['block_pipeline']}}",
              "--fail-pipeline",
              "{{$.inputs.parameters['fail_pipeline']}}",
              "----output-paths",
              "{{$.outputs.parameters['state'].output_file}}",
              "{{$.outputs.parameters['output_notebook_file'].output_file}}",
              "{{$.outputs.parameters['error'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-api-python-client==2.17.0' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-api-python-client==2.17.0' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def execute_notebook(\n  project_id,\n  input_notebook_file,\n  output_notebook_folder,\n  execution_id,\n  location = 'us-central1',\n  master_type = 'n1-standard-4',\n  scale_tier = 'CUSTOM',\n  accelerator_type = None,\n  accelerator_core_count = '0',\n  labels = '',\n  container_image_uri = 'gcr.io/deeplearning-platform-release/base-cpu:latest',\n  params_yaml_file = None,\n  parameters = None,\n  block_pipeline = True,\n  fail_pipeline = True\n):\n  \"\"\"Function that creates the component file `output_component_file`.\n\n  Executes a notebooks and returns details about the execution. Function either\n  returns a tuple or raises an error depending on the `fail_pipeline` parameter.\n\n  Returns:\n    state:str State of the execution. Generelly empty if error.\n    output_notebook_file:str Executed notebook GCS path. Usually empty if error.\n    error:str error message.\n\n  TODO(mayran): Adding a column after raises creates an error.\n  Raises\n    RuntimeError with the error message.\n  \"\"\"\n\n  from googleapiclient import discovery\n  from googleapiclient import errors\n  from googleapiclient.http import set_user_agent\n  import httplib2\n  import time\n  from types import SimpleNamespace\n  from typing import NamedTuple, Optional  # pylint: disable=unused-import\n\n  # ------------------------------------------------\n  # Sets input and outputs for the execution.\n  # ------------------------------------------------\n  labels = [\n    'vertex_pipelines=notebook_executor',\n    labels,\n  ]\n\n  inputs_executor_api = SimpleNamespace(\n    project_id=project_id,\n    input_notebook_file=input_notebook_file,\n    output_notebook_folder=output_notebook_folder,\n    execution_id=execution_id,\n    location=location,\n    master_type=master_type,\n    scale_tier=scale_tier,\n    accelerator_type=accelerator_type,\n    accelerator_core_count=accelerator_core_count,\n    labels=','.join([l for l in labels if l]),\n    container_image_uri=container_image_uri,\n    params_yaml_file=params_yaml_file,\n    parameters=parameters,\n  )\n\n  outputs = SimpleNamespace(\n    state='',\n    output_notebook_file = '',\n    error = '',\n  )\n\n  # ------------------------------------------------\n  # Runs execution using the Executor API.\n  # ------------------------------------------------\n\n  # Executes executions().create()\n  ec_parent = f'projects/{project_id}/locations/{location}'\n  ec_body = NotebooksExecutor._build_body_executor(inputs_executor_api)\n  ec_request = NotebooksExecutor._build_executions_create(ec_parent, execution_id, ec_body)\n  ec_response, err = NotebooksExecutor._execute_executions_create(ec_request)\n  if err:\n    return NotebooksExecutor._build_notebook_execution_outputs(error=err)\n\n  execution, err = NotebooksExecutor._wait_for_executions_create(ec_response)\n  if err:\n    return NotebooksExecutor._build_notebook_execution_outputs(error=err)\n\n  # Initial execution's parameters, after it was created by operation.\n  if not block_pipeline:\n    return NotebooksExecutor._build_notebook_execution_outputs(\n        execution=execution)\n\n  # Final execution's parameters, after it fully ran.\n  execution_name = execution.get('name', '')\n  execution, err = NotebooksExecutor._wait_for_execution_run(execution_name)\n  if err:\n    return NotebooksExecutor._build_notebook_execution_outputs(error=err)\n\n  # ------------------------------------------------\n  # Returns outputs.\n  # ------------------------------------------------\n  return NotebooksExecutor._build_notebook_execution_outputs(\n      execution=execution, error=err)\n\ndef _deserialize_bool(s) -> bool:\n    from distutils.util import strtobool\n    return strtobool(s) == 1\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Execute notebook', description='Function that creates the component file `output_component_file`.')\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--input-notebook-file\", dest=\"input_notebook_file\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-notebook-folder\", dest=\"output_notebook_folder\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--execution-id\", dest=\"execution_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--location\", dest=\"location\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--master-type\", dest=\"master_type\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--scale-tier\", dest=\"scale_tier\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--accelerator-type\", dest=\"accelerator_type\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--accelerator-core-count\", dest=\"accelerator_core_count\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--labels\", dest=\"labels\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--container-image-uri\", dest=\"container_image_uri\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--params-yaml-file\", dest=\"params_yaml_file\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--parameters\", dest=\"parameters\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--block-pipeline\", dest=\"block_pipeline\", type=_deserialize_bool, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--fail-pipeline\", dest=\"fail_pipeline\", type=_deserialize_bool, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=3)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = execute_notebook(**_parsed_args)\n\n_output_serializers = [\n    _serialize_str,\n    _serialize_str,\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.8"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "notebooks-executor-sample-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "execute-notebook": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-execute-notebook"
            },
            "inputs": {
              "parameters": {
                "accelerator_core_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "0"
                    }
                  }
                },
                "block_pipeline": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "container_image_uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "gcr.io/deeplearning-platform-release/base-cpu:latest"
                    }
                  }
                },
                "execution_id": {
                  "componentInputParameter": "execution_id"
                },
                "fail_pipeline": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "input_notebook_file": {
                  "componentInputParameter": "input_notebook"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-central1"
                    }
                  }
                },
                "master_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-4"
                    }
                  }
                },
                "output_notebook_folder": {
                  "componentInputParameter": "output_notebook_folder"
                },
                "parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "PROJECT_ID={{$.inputs.parameters['pipelineparam--project_id']}},EXECUTION_ID={{$.inputs.parameters['pipelineparam--execution_id']}}"
                    }
                  }
                },
                "pipelineparam--execution_id": {
                  "componentInputParameter": "execution_id"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                },
                "scale_tier": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "CUSTOM"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "execute-notebook"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "execution_id": {
            "type": "STRING"
          },
          "input_notebook": {
            "type": "STRING"
          },
          "output_notebook_folder": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.7.1"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://mam-nooage-vertex-root"
  }
}