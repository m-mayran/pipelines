name: Execute notebook
description: Function that creates the component file `output_component_file`.
metadata:
  annotations: {author: Matthieu Mayran, canonical_location: 'https://raw.githubusercontent.com/m-mayran/pipelines/blob/notebooks_executor/components/google-cloud/google_cloud_pipeline_components/experimental/notebooks/component.yaml'}
inputs:
- {name: project_id, type: String}
- {name: input_notebook_file, type: String}
- {name: output_notebook_folder, type: String}
- {name: execution_id, type: String}
- {name: location, type: String, default: us-central1, optional: true}
- {name: master_type, type: String, default: n1-standard-4, optional: true}
- {name: scale_tier, type: String, default: CUSTOM, optional: true}
- {name: accelerator_type, type: String, optional: true}
- {name: accelerator_core_count, type: String, default: '0', optional: true}
- {name: labels, type: String, default: '', optional: true}
- {name: container_image_uri, type: String, default: 'gcr.io/deeplearning-platform-release/base-cpu:latest',
  optional: true}
- {name: params_yaml_file, type: String, optional: true}
- {name: parameters, type: String, optional: true}
- name: block_pipeline
  type: Boolean
  default: "True"
  optional: true
- name: fail_pipeline
  type: Boolean
  default: "True"
  optional: true
outputs:
- {name: state, type: String}
- {name: output_notebook_file, type: String}
- {name: error, type: String}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'google-api-python-client==2.17.0' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'google-api-python-client==2.17.0'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def execute_notebook(
        project_id,
        input_notebook_file,
        output_notebook_folder,
        execution_id,
        location = 'us-central1',
        master_type = 'n1-standard-4',
        scale_tier = 'CUSTOM',
        accelerator_type = None,
        accelerator_core_count = '0',
        labels = '',
        container_image_uri = 'gcr.io/deeplearning-platform-release/base-cpu:latest',
        params_yaml_file = None,
        parameters = None,
        block_pipeline = True,
        fail_pipeline = True
      ):
        """Function that creates the component file `output_component_file`.

        Executes a notebooks and returns details about the execution. Function either
        returns a tuple or raises an error depending on the `fail_pipeline` parameter.

        Returns:
          state:str State of the execution. Generelly empty if error.
          output_notebook_file:str Executed notebook GCS path. Usually empty if error.
          error:str error message.

        TODO(mayran): Adding a column after raises creates an error.
        Raises
          RuntimeError with the error message.
        """

        from googleapiclient import discovery
        from googleapiclient import errors
        from googleapiclient.http import set_user_agent
        import httplib2
        import time
        from types import SimpleNamespace
        from typing import NamedTuple, Optional  # pylint: disable=unused-import

        # ------------------------------------------------
        # Sets input and outputs for the execution.
        # ------------------------------------------------
        labels = [
          'vertex_pipelines=notebook_executor',
          labels,
        ]

        inputs_executor_api = SimpleNamespace(
          project_id=project_id,
          input_notebook_file=input_notebook_file,
          output_notebook_folder=output_notebook_folder,
          execution_id=execution_id,
          location=location,
          master_type=master_type,
          scale_tier=scale_tier,
          accelerator_type=accelerator_type,
          accelerator_core_count=accelerator_core_count,
          labels=','.join([l for l in labels if l]),
          container_image_uri=container_image_uri,
          params_yaml_file=params_yaml_file,
          parameters=parameters,
        )

        outputs = SimpleNamespace(
          state='',
          output_notebook_file = '',
          error = '',
        )

        # ------------------------------------------------
        # Runs execution using the Executor API.
        # ------------------------------------------------

        # Executes executions().create()
        ec_parent = f'projects/{project_id}/locations/{location}'
        ec_body = NotebooksExecutor._build_body_executor(inputs_executor_api)
        ec_request = NotebooksExecutor._build_executions_create(ec_parent, execution_id, ec_body)
        ec_response, err = NotebooksExecutor._execute_executions_create(ec_request)
        if err:
          return NotebooksExecutor._build_notebook_execution_outputs(error=err)

        execution, err = NotebooksExecutor._wait_for_executions_create(ec_response)
        if err:
          return NotebooksExecutor._build_notebook_execution_outputs(error=err)

        # Initial execution's parameters, after it was created by operation.
        if not block_pipeline:
          return NotebooksExecutor._build_notebook_execution_outputs(
              execution=execution)

        # Final execution's parameters, after it fully ran.
        execution_name = execution.get('name', '')
        execution, err = NotebooksExecutor._wait_for_execution_run(execution_name)
        if err:
          return NotebooksExecutor._build_notebook_execution_outputs(error=err)

        # ------------------------------------------------
        # Returns outputs.
        # ------------------------------------------------
        return NotebooksExecutor._build_notebook_execution_outputs(
            execution=execution, error=err)

      def _deserialize_bool(s) -> bool:
          from distutils.util import strtobool
          return strtobool(s) == 1

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Execute notebook', description='Function that creates the component file `output_component_file`.')
      _parser.add_argument("--project-id", dest="project_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--input-notebook-file", dest="input_notebook_file", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-notebook-folder", dest="output_notebook_folder", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--execution-id", dest="execution_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--location", dest="location", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--master-type", dest="master_type", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--scale-tier", dest="scale_tier", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--accelerator-type", dest="accelerator_type", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--accelerator-core-count", dest="accelerator_core_count", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--labels", dest="labels", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--container-image-uri", dest="container_image_uri", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--params-yaml-file", dest="params_yaml_file", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--parameters", dest="parameters", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--block-pipeline", dest="block_pipeline", type=_deserialize_bool, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--fail-pipeline", dest="fail_pipeline", type=_deserialize_bool, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=3)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = execute_notebook(**_parsed_args)

      _output_serializers = [
          _serialize_str,
          _serialize_str,
          _serialize_str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --project-id
    - {inputValue: project_id}
    - --input-notebook-file
    - {inputValue: input_notebook_file}
    - --output-notebook-folder
    - {inputValue: output_notebook_folder}
    - --execution-id
    - {inputValue: execution_id}
    - if:
        cond: {isPresent: location}
        then:
        - --location
        - {inputValue: location}
    - if:
        cond: {isPresent: master_type}
        then:
        - --master-type
        - {inputValue: master_type}
    - if:
        cond: {isPresent: scale_tier}
        then:
        - --scale-tier
        - {inputValue: scale_tier}
    - if:
        cond: {isPresent: accelerator_type}
        then:
        - --accelerator-type
        - {inputValue: accelerator_type}
    - if:
        cond: {isPresent: accelerator_core_count}
        then:
        - --accelerator-core-count
        - {inputValue: accelerator_core_count}
    - if:
        cond: {isPresent: labels}
        then:
        - --labels
        - {inputValue: labels}
    - if:
        cond: {isPresent: container_image_uri}
        then:
        - --container-image-uri
        - {inputValue: container_image_uri}
    - if:
        cond: {isPresent: params_yaml_file}
        then:
        - --params-yaml-file
        - {inputValue: params_yaml_file}
    - if:
        cond: {isPresent: parameters}
        then:
        - --parameters
        - {inputValue: parameters}
    - if:
        cond: {isPresent: block_pipeline}
        then:
        - --block-pipeline
        - {inputValue: block_pipeline}
    - if:
        cond: {isPresent: fail_pipeline}
        then:
        - --fail-pipeline
        - {inputValue: fail_pipeline}
    - '----output-paths'
    - {outputPath: state}
    - {outputPath: output_notebook_file}
    - {outputPath: error}
